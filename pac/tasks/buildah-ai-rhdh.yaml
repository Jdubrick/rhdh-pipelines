apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: "docker"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "containers, ai-rhdh"
  name: buildah-ai-rhdh
spec:
  description: |-
    Buildah task builds source code into a container image and pushes the image into container registry using buildah tool.
    In addition it generates a SBOM file, injects the SBOM file into final container image and pushes the SBOM file as separate image using cosign tool.
  params:
  - description: Reference of the image buildah will produce.
    name: IMAGE
    type: string
  - default: ./Dockerfile
    description: Path to the Dockerfile to build.
    name: DOCKERFILE
    type: string
  - default: .
    description: Path to the directory to use as context.
    name: CONTEXT
    type: string
  - default: "true"
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    name: TLSVERIFY
    type: string
  - name: BUILD_ARGS
    description: Array of --build-arg values ("arg=value" strings)
    type: array
    default: []
  - name: BUILD_ARGS_FILE
    description: Path to a file with build arguments, see https://www.mankier.com/1/buildah-build#--build-arg-file
    type: string
    default: ""
  - name: STORAGE_DRIVER
    description: Storage driver to configure for buildah
    type: string
    default: vfs
  results:
  - description: Digest of the image just built
    name: IMAGE_DIGEST
  - description: Image repository and tag where the built image was pushed
    name: IMAGE_URL
  - description: Digests of the base images used for build
    name: BASE_IMAGES_DIGESTS
  - description: Link to the SBOM layer pushed to the registry as part of an OCI artifact.
    name: SBOM_BLOB_URL
  stepTemplate:
    env:
    - name: STORAGE_DRIVER
      value: $(params.STORAGE_DRIVER)
    - name: CONTEXT
      value: $(params.CONTEXT)
    - name: DOCKERFILE
      value: $(params.DOCKERFILE)
    - name: IMAGE
      value: $(params.IMAGE)
    - name: TLSVERIFY
      value: $(params.TLSVERIFY)
    - name: BUILD_ARGS_FILE
      value: $(params.BUILD_ARGS_FILE)
  steps:
  - name: build
    image: registry.access.redhat.com/ubi9/buildah@sha256:29402688af2b394a8400d946751520dbaea64759bbce2ef6928dc58ede6020e6
    args:
      - $(params.BUILD_ARGS[*])
    script: |
      # Check if the Dockerfile exists
      SOURCE_CODE_DIR=source
      if [ -e "$SOURCE_CODE_DIR/$CONTEXT/$DOCKERFILE" ]; then
        dockerfile_path="$SOURCE_CODE_DIR/$CONTEXT/$DOCKERFILE"
      elif [ -e "$SOURCE_CODE_DIR/$DOCKERFILE" ]; then
        dockerfile_path="$SOURCE_CODE_DIR/$DOCKERFILE"
      else
        echo "Cannot find Dockerfile $DOCKERFILE"
        exit 1
      fi

      BUILDAH_ARGS=()
      if [ -n "${BUILD_ARGS_FILE}" ]; then
        BUILDAH_ARGS+=("--build-arg-file=${SOURCE_CODE_DIR}/${BUILD_ARGS_FILE}")
      fi

      for build_arg in "$@"; do
        BUILDAH_ARGS+=("--build-arg=$build_arg")
      done

      # Build the image
      buildah build \
        "${BUILDAH_ARGS[@]}" \
        --tls-verify=$TLSVERIFY \
        --ulimit nofile=4096:4096 \
        -f "$dockerfile_path" -t $IMAGE $SOURCE_CODE_DIR/$CONTEXT

      # Push the image
      buildah push \
        --tls-verify=$TLSVERIFY \
        --retry=5 \
        --digestfile /tmp/files/image-digest $IMAGE \
        docker://$IMAGE

      # Set task results
      buildah images --format '{{ .Name }}:{{ .Tag }}@{{ .Digest }}' | grep -v $IMAGE > $(results.BASE_IMAGES_DIGESTS.path)
      cat /tmp/files/image-digest | tee $(results.IMAGE_DIGEST.path)
      echo -n "$IMAGE" | tee $(results.IMAGE_URL.path)

    securityContext:
      capabilities:
        add:
          # this is needed so that buildah can write to the mounted /var/lib/containers directory
          - SETFCAP
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /tmp/files
      name: tmpfiles
    workingDir: $(workspaces.source.path)

  volumes:
  - emptyDir: {}
    name: varlibcontainers
  - emptyDir: {}
    name: tmpfiles
  workspaces:
  - name: source
    description: Workspace containing the source code to build.
